#!/bin/bash
# Post-merge hook for integrated worktree removal and Docker cleanup
# Uses shared cleanup utilities from claude-devcontainer CLI

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging setup
HOOK_LOG=".git/hooks/post-merge.log"

log_message() {
    # Ensure log directory exists
    mkdir -p "$(dirname "$HOOK_LOG")" 2>/dev/null || true
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$HOOK_LOG"
}

print_status() {
    echo -e "${BLUE}[CLEANUP]${NC} $1"
    log_message "INFO: $1"
}

print_success() {
    echo -e "${GREEN}[CLEANUP]${NC} $1"
    log_message "SUCCESS: $1"
}

print_warning() {
    echo -e "${YELLOW}[CLEANUP]${NC} $1"
    log_message "WARNING: $1"
}

print_error() {
    echo -e "${RED}[CLEANUP]${NC} $1"
    log_message "ERROR: $1"
}

# Function to get the branch that was just merged
get_merged_branch() {
    # Get the merge commit message
    local merge_msg
    merge_msg=$(git log -1 --pretty=%B HEAD 2>/dev/null || echo "")
    
    # Parse different merge message formats
    local branch_name=""
    
    # Format: "Merge branch 'feature-branch'"
    if [[ $merge_msg =~ Merge\ branch\ \'([^\']+)\' ]]; then
        branch_name="${BASH_REMATCH[1]}"
    # Format: "Merge pull request #123 from user/feature-branch"
    elif [[ $merge_msg =~ Merge\ pull\ request.*from\ [^/]+/(.+) ]]; then
        branch_name="${BASH_REMATCH[1]}"
    fi
    
    echo "$branch_name"
}

# Function to find the claude-devcontainer CLI
find_claude_cli() {
    # Try to find claude-devcontainer or cdc in various locations
    local cli_paths=(
        "$(which claude-devcontainer 2>/dev/null || true)"
        "$(which cdc 2>/dev/null || true)"
        "./tools/claude-devcontainer/src/index.js"
        "../tools/claude-devcontainer/src/index.js"
        "../../tools/claude-devcontainer/src/index.js"
    )
    
    for cli_path in "${cli_paths[@]}"; do
        if [ -n "$cli_path" ] && [ -f "$cli_path" ]; then
            echo "$cli_path"
            return 0
        fi
    done
    
    return 1
}

# Function to run cleanup using claude-devcontainer CLI
run_cli_cleanup() {
    local branch_name="$1"
    
    # Find the CLI
    local cli_path
    cli_path=$(find_claude_cli)
    
    if [ $? -ne 0 ]; then
        print_warning "Claude DevContainer CLI not found, falling back to basic git cleanup"
        return 1
    fi
    
    print_status "Using Claude DevContainer CLI for cleanup"
    
    # Run the cleanup command
    if [[ "$cli_path" == *.js ]]; then
        # Node.js script
        if node "$cli_path" cleanup "$branch_name" --force 2>/dev/null; then
            return 0
        fi
    else
        # Binary/executable
        if "$cli_path" cleanup "$branch_name" --force 2>/dev/null; then
            return 0
        fi
    fi
    
    return 1
}

# Fallback function for basic git worktree cleanup (no Docker cleanup)
fallback_git_cleanup() {
    local branch_name="$1"
    
    print_status "Running fallback git-only cleanup"
    
    # Get worktrees for this branch
    local worktrees=()
    local current_worktree_path=""
    
    while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            current_worktree_path="${line#worktree }"
            continue
        elif [[ $line == branch* ]] && [[ -n "$current_worktree_path" ]]; then
            local worktree_branch="${line#branch refs/heads/}"
            if [[ "$worktree_branch" == "$branch_name" ]]; then
                worktrees+=("$current_worktree_path")
            fi
            current_worktree_path=""
        fi
    done < <(git worktree list --porcelain 2>/dev/null || true)
    
    if [ ${#worktrees[@]} -eq 0 ]; then
        print_status "No worktrees found for branch '$branch_name'"
        return 0
    fi
    
    # Remove worktrees
    for worktree_path in "${worktrees[@]}"; do
        local worktree_name
        worktree_name=$(basename "$worktree_path")
        
        echo ""
        echo -e "${BLUE}🔍 Found worktree for merged branch:${NC}"
        echo "   Path: $worktree_path"
        echo ""
        echo -e "${YELLOW}Remove worktree? Docker artifacts will NOT be cleaned up.${NC}"
        read -p "Remove '$worktree_name'? (y/N): " -n 1 -r
        echo ""
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if git worktree remove "$worktree_path" 2>/dev/null; then
                print_success "✅ Removed worktree: $worktree_name"
                print_warning "⚠️  Docker artifacts were not cleaned up (CLI not available)"
                print_status "💡 To clean Docker artifacts, install claude-devcontainer CLI and run:"
                print_status "   cdc cleanup --list  # to see remaining artifacts"
            else
                print_error "Failed to remove worktree: $worktree_path"
            fi
        else
            print_status "Skipped worktree: $worktree_name"
        fi
    done
}

# Main execution
main() {
    log_message "Post-merge hook triggered"
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi
    
    print_status "Merge completed. Checking for worktrees to clean up..."
    
    # Get the branch that was just merged
    local merged_branch
    merged_branch=$(get_merged_branch)
    
    if [ -z "$merged_branch" ]; then
        print_status "Could not determine merged branch from commit message"
        log_message "No merged branch detected, exiting"
        exit 0
    fi
    
    print_status "Detected merged branch: $merged_branch"
    
    # Try to use claude-devcontainer CLI first
    if run_cli_cleanup "$merged_branch"; then
        print_success "Post-merge cleanup completed using Claude DevContainer CLI!"
    else
        # Fall back to basic git cleanup
        fallback_git_cleanup "$merged_branch"
        print_success "Post-merge git cleanup completed!"
    fi
    
    log_message "Post-merge hook completed"
}

# Execute only if not being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi